result_str="";
for row in range(0,7):
for column in range(0,7):
if (column == 1 or ((row == 0 or row == 3) and column > 1 and column < 5) or (column == 5 and row != 0 and row < 3) or (column == row - 1 and row > 2)):
result_str=result_str+"*"
else:
result_str=result_str+" "
result_str=result_str+"\n"
print(result_str);
# take input from the user
num = as.integer(readline(prompt="Enter a number: "))
# check is the number is negative, positive or zero
if(num < 0) {
print("Sorry, factorial does not exist for negative numbers")
} else if(num == 0) {
print("The factorial of 0 is 1")
} else {
for(i in 1:num) {
factorial = factorial * i
}
print(paste("The factorial of", num ,"is",factorial))
}
# take input from the user
num = as.integer(readline(prompt="Enter a number: "))
# check is the number is negative, positive or zero
if(num < 0) {
print("Sorry, factorial does not exist for negative numbers")
} else if(num == 0) {
print("The factorial of 0 is 1")
} else {
for(i in 1:num) {
factorial = factorial * i
}
print(paste("The factorial of", num ,"is",factorial))
}
# take input from the user
num = as.integer(readline(prompt="Enter a number: "))
# check is the number is negative, positive or zero
if(num < 0) {
print("Sorry, factorial does not exist for negative numbers")
} else if(num == 0) {
print("The factorial of 0 is 1")
} else {
for(i in 1:num) {
factorial = factorial * i
}
print(paste("The factorial of", num ,"is",factorial))
}
# take input from the user
num = 9876
factorial = 1
# check is the number is negative, positive or zero
if(num < 0) {
print("Sorry, factorial does not exist for negative numbers")
} else if(num == 0) {
print("The factorial of 0 is 1")
} else {
for(i in 1:num) {
factorial = factorial * i
}
print(paste("The factorial of", num ,"is",factorial))
}
# take input from the user
num = 545
factorial = 1
# check is the number is negative, positive or zero
if(num < 0) {
print("Sorry, factorial does not exist for negative numbers")
} else if(num == 0) {
print("The factorial of 0 is 1")
} else {
for(i in 1:num) {
factorial = factorial * i
}
print(paste("The factorial of", num ,"is",factorial))
}
10
# take input from the user
num = 5
factorial = 1
# check is the number is negative, positive or zero
if(num < 0) {
print("Sorry, factorial does not exist for negative numbers")
} else if(num == 0) {
print("The factorial of 0 is 1")
} else {
for(i in 1:num) {
factorial = factorial * i
}
print(paste("The factorial of", num ,"is",factorial))
}
# take input from the user
num = as.integer(readline(prompt="Enter a number: "))
# check is the number is negative, positive or zero
if(num < 0) {
print("Sorry, factorial does not exist for negative numbers")
} else if(num == 0) {
print("The factorial of 0 is 1")
} else {
for(i in 1:num) {
factorial = factorial * i
}
print(paste("The factorial of", num ,"is",factorial))
}
# take input from the user
num = as.integer(readline(prompt="Enter a number: "))
# check is the number is negative, positive or zero
if(num < 0) {
print("Sorry, factorial does not exist for negative numbers")
} else if(num == 0) {
print("The factorial of 0 is 1")
} else {
for(i in 1:num) {
factorial = factorial * i
}
print(paste("The factorial of", num ,"is",factorial))
}
# take input from the user
x=1;
while(x<10000){
num = as.integer(readline(prompt="Enter a number: "))
factorial = 1
# check is the number is negative, positive or zero
if(num < 0) {
print("Sorry, factorial does not exist for negative numbers")
} else if(num == 0) {
print("The factorial of 0 is 1")
} else {
for(i in 1:num) {
factorial = factorial * i
}
print(paste("The factorial of", num ,"is",factorial))
}
# take input from the user
x=1;
while (x<1000) {
num = 20
factorial = 1
# check is the number is negative, positive or zero
if(num < 0) {
print("Sorry, factorial does not exist for negative numbers")
} else if(num == 0) {
print("The factorial of 0 is 1")
} else {
for(i in 1:num) {
factorial = factorial * i
}
print(paste("The factorial of", num ,"is",factorial))
}
x=x+1;
}
num = 20
factorial = 1
# check is the number is negative, positive or zero
if(num < 0) {
print("Sorry, factorial does not exist for negative numbers")
} else if(num == 0) {
print("The factorial of 0 is 1")
} else {
for(i in 1:num) {
factorial = factorial * i
}
print(paste("The factorial of", num ,"is",factorial))
}
x=1
while (x<10000) {
num = 20
factorial = 1
# check is the number is negative, positive or zero
if(num < 0) {
print("Sorry, factorial does not exist for negative numbers")
} else if(num == 0) {
print("The factorial of 0 is 1")
} else {
for(i in 1:num) {
factorial = factorial * i
}
print(paste("The factorial of", num ,"is",factorial))
}
x=x+1;
print("Hello test test ------", x)
}
x=1
while (x<10000) {
num = 20
factorial = 1
# check is the number is negative, positive or zero
if(num < 0) {
print("Sorry, factorial does not exist for negative numbers")
} else if(num == 0) {
print("The factorial of 0 is 1")
} else {
for(i in 1:num) {
factorial = factorial * i
}
print(paste("The factorial of", num ,"is",factorial))
}
x=x+1;
print("Hello test test ------")
}
library(microbenchmark)
t<- runif(100)
microbenchmark(
x=1
while (x<10000) {
num = 20
factorial = 1
# check is the number is negative, positive or zero
if(num < 0) {
print("Sorry, factorial does not exist for negative numbers")
} else if(num == 0) {
print("The factorial of 0 is 1")
} else {
for(i in 1:num) {
factorial = factorial * i
}
print(paste("The factorial of", num ,"is",factorial))
}
x=x+1;
print("Hello test test ------")
})
library(microbenchmark)
t<- runif(100)
microbenchmark(
sqrt(t), x^ 0.5
)
n<- 1:1e6
system.time(for (i in 1:n) {
sqrt(x)/length(n)
})
n<- 1:1e6
system.time(for (i in 1:n) sqrt(x))/length(n)
for (i in 1:10000) {
for (j in 1:10000) {
}
}
system.time(for (i in 1:10000) {
for (j in 1:10000) {
x= sqrt(i)/sqrt(j)
}
})
system.time(for (i in 1:10000) {
for (j in 1:10000) {
x= sqrt(i)/sqrt(j)
}
})
system.time(for (i in 1:10000) {
for (j in 1:10000) {
x= sqrt(i)/sqrt(j)
print(x)
}
})
system.time(for (i in 1:500) {
for (j in 1:500) {
x= sqrt(i)/sqrt(j)
print(x)
}
})
for (i in 1:1000) {
for (j in 1:10000) {
x=sqrt(i)/sqrt(j);
}
}
for (i in 1:1000) {
for (j in 1:10000) {
x=sqrt(i)/sqrt(j);
print(x)
}
}
WestRoxbury <- read.csv("~/Downloads/WestRoxbury.csv")
View(WestRoxbury)
housing.df <- read.csv("WestRoxbury.csv", header = TRUE)
?round
?sample
library(reshape)
# Simple strategies for dimension reduction
install.packages("reshape")
library(reshape)
#### Table 4.3
boston.housing.df <- read.csv("BostonHousing.csv", header = TRUE)
#### Table 4.3
boston.housing.df <- read.csv("BostonHousing.csv", header = TRUE)
BostonHousing <- read.csv("~/Downloads/BostonHousing.csv")
View(BostonHousing)
boston.housing.df <- read.csv("BostonHousing.csv", header = TRUE)
head(boston.housing.df, 9)
setwd("/Users/vishnu/Downloads")
#### Table 4.3
boston.housing.df <- read.csv("BostonHousing.csv", header = TRUE)
head(boston.housing.df, 9)
summary(boston.housing.df)
?which
c(1:9)
boston.housing.df
library(caret)
library(e1071)
#### Table 5.5
install.packages(caret)
#### Table 5.5
install.packages("caret")
install.packages("e1071")
library(caret)
library(e1071)
owner.df <- read.csv("ownerExample.csv")
owner.df
setwd("/Users/vishnu/Documents/GitHub/Business-Analytics-Learning")
toyota.corola.df = read.csv("ToyotaCorolla.csv")
toyota.corola.df
view(toyota.corola.df)
View(toyota.corola.df)
rm(list = ls(all=TRUE))
setwd("/Users/vishnu/Documents/GitHub/Business-Analytics-Learning")
toyota.corola.df = read.csv("ToyotaCorolla.csv")
toyota.corola.df
fuel_type_cat <- model.matrix(~factor(toyota.corola.df$Fuel_Type))
fuel_type_cat
color.cat <- model.matrix(~factor(toyota.corola.df$Color))
unique(toyota.corola.df$Fuel_Type)
cor(na.omit(toyota.corolla.df[,-c(1,2,5,6,8,10:12,14:16,19:39)]))
cor(na.omit(toyota.corola.df[,-c(1,2,5,6,8,10:12,14:16,19:39)]))
Propensity <- c(0.03, 0.52, 0.38, 0.82, 0.33, 0.42, 0.55, 0.59, 0.09, 0.21,
0.43, 0.04, 0.08, 0.13, 0.01, 0.79, 0.42, 0.29, 0.08, 0.02)
Actual <- c(0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0)
df <- cbind(Propensity, Actual)
df <- as.data.frame(df)
summary(df)
install.packages("caret")
install.packages("caret")
Propensity <- c(0.03, 0.52, 0.38, 0.82, 0.33, 0.42, 0.55, 0.59, 0.09, 0.21,
0.43, 0.04, 0.08, 0.13, 0.01, 0.79, 0.42, 0.29, 0.08, 0.02)
Actual <- c(0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0)
df <- cbind(Propensity, Actual)
df <- as.data.frame(df)
summary(df)
library(caret)
confusionMatrix(factor(ifelse(df$Propensity>0.25, 1, 0)),
factor(df$Actual), positive = "1")
library(gains)
gain <- gains(df$Actual, df$Propensity, groups = 10)
barplot(gain$mean.resp/mean(df$Actual),
names.arg = gain$depth,
xlab = "Depth of File",
ylab = "Mean Response",
main = "Decile-wise lift chart")
install.packages("gains")
library(gains)
gain <- gains(df$Actual, df$Propensity, groups = 10)
barplot(gain$mean.resp/mean(df$Actual),
names.arg = gain$depth,
xlab = "Depth of File",
ylab = "Mean Response",
main = "Decile-wise lift chart")
