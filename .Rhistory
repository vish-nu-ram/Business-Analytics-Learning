library(ggraph)
bigram_counts
bigram_graph <- bigram_counts %>%
filter(n > 20) %>%
graph_from_data_frame()
set.seed(2017)
ggraph(bigram_graph, layout = "fr") +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = name), vjust = 1, hjust = 1)
austen_section_words <- austen_books() %>%
filter(book == "Pride & Prejudice") %>%
mutate(section = row_number() %/% 10) %>%
filter(section > 0) %>%
unnest_tokens(word, text) %>%
filter(!word %in% stop_words$word)
library(widyr)
install.packages("widyr")
library(widyr)
word_pairs <- austen_section_words %>%
pairwise_count(word, section, sort = TRUE)
word_pairs
word_pairs %>%
filter(item1 == "darcy")
word_cors <- austen_section_words %>%
group_by(word) %>%
filter(n() >= 20) %>%
pairwise_cor(word, section, sort = TRUE)
word_cors %>%
filter(item1 == "pounds")
word_cors %>%
filter(item1 %in% c("elizabeth", "pounds", "married", "pride")) %>%
group_by(item1) %>%
slice_max(correlation, n = 6) %>%
ungroup() %>%
mutate(item2 = reorder(item2, correlation)) %>%
ggplot(aes(item2, correlation)) +
geom_bar(stat = "identity") +
facet_wrap(~ item1, scales = "free") +
coord_flip()
set.seed(2016)
word_cors %>%
filter(correlation > .15) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = correlation), show.legend = FALSE) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
library(tidyverse)
library(ggplot2)
library(caret)
library(caretEnsemble)
library(psych)
library(Amelia)
library(mice)
library(GGally)
library(rpart)
library(randomForest)
data<- read.csv("diabetes.csv")
data$Outcome <- factor(data$Outcome, levels = c(0,1), labels = c("False", "True"))
head(data)
install.packages("GGally")
library(caret)
library(caretEnsemble)
install.packages("caretEnsemble")
library(caretEnsemble)
library(psych)
install.packages("psych")
library(psych)
install.packages("Amelia")
install.packages("Amelia")
library(Amelia)
library(mice)
library(rpart)
library(randomForest)
data<- read.csv("diabetes.csv")
data$Outcome <- factor(data$Outcome, levels = c(0,1), labels = c("False", "True"))
head(data)
#Convert '0' values into NA
data[, 2:7][data[, 2:7] == 0] <- NA
#visualize the missing data
missmap(data)
# remove NAs
library(mice)
mice_mod <- mice(data[, c("Glucose","BloodPressure","SkinThickness","Insulin","BMI")], method='rf')
mice_complete <- complete(mice_mod)
missmap(mice_complete)
data$Glucose <- mice_complete$Glucose
data$BloodPressure <- mice_complete$BloodPressure
data$SkinThickness <- mice_complete$SkinThickness
data$Insulin<- mice_complete$Insulin
data$BMI <- mice_complete$BMI
data
missmap(data)
#ggpally package
ggpairs(data)
#Building a model
#split data into training and test data sets
indxTrain <- createDataPartition(y = data$Outcome,p = 0.75,list = FALSE)
training <- data[indxTrain,]
testing <- data[-indxTrain,]
#Check dimensions of the split >
prop.table(table(data$Outcome)) * 100
prop.table(table(training$Outcome)) * 100
#Building a model
#split data into training and test data sets
indxTrain <- createDataPartition(y = data$Outcome,p = 0.75,list = FALSE)
?createDataPartition
??createDataPartition
library(caret)
#install.packages("caretEnsemble")
library(caretEnsemble)
#Building a model
#split data into training and test data sets
indxTrain <- createDataPartition(y = data$Outcome,p = 0.75,list = FALSE)
training <- data[indxTrain,]
testing <- data[-indxTrain,]
#Check dimensions of the split >
prop.table(table(data$Outcome)) * 100
prop.table(table(training$Outcome)) * 100
prop.table(table(testing$Outcome)) * 100
x = training[,-9]
y = training$Outcome
#ggpally package
ggpairs(data)
#install.packages("GGally")
library(GGally)
#ggpally package
ggpairs(data)
#Building a model
#split data into training and test data sets
indxTrain <- createDataPartition(y = data$Outcome,p = 0.75,list = FALSE)
training <- data[indxTrain,]
testing <- data[-indxTrain,]
#Check dimensions of the split >
prop.table(table(data$Outcome)) * 100
prop.table(table(training$Outcome)) * 100
prop.table(table(testing$Outcome)) * 100
x = training[,-9]
y = training$Outcome
#classification
library(e1071)
# list of methods http://topepo.github.io/caret/train-models-by-tag.html
model = train(x,y,method='nb',trControl=trainControl(method='cv',number=10))
# list of methods http://topepo.github.io/caret/train-models-by-tag.html
model = train(x,y,method='nb',trControl=trainControl(method='cv',number=10))
#Model Evaluation
#Predict testing set
Predict <- predict(model,newdata = testing )
confusionMatrix(data=Predict, reference = testing$Outcome)
model
library(tm)
library(topicmodels)
library(textmineR)
library(tidyr)
library(ggplot2)
library(dplyr)
library(tidytext)
data("AssociatedPress")
ap_lda <- LDA(AssociatedPress, k = 2, control = list(seed = 1234))
ap_topics <- tidy(ap_lda, matrix = "beta")
AssociatedPress
ap_topics
ap_top_terms <- ap_topics %>%
group_by(topic) %>%
slice_max(beta, n = 10) %>%
ungroup() %>%
arrange(topic, -beta)
ap_top_terms
ap_top_terms %>%
mutate(term = reorder_within(term, beta, topic)) %>%
ggplot(aes(beta, term, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
scale_y_reordered()
# Twitter
library(twitteR)
consumer_key <- 'rzurc0DlWQ3TqiOS8Dq4TFIT2'
consumer_secret <- 'MrZzGALRyL8Vz0M5DUJl56vVqTrtmdzqggh0V8az7SdRM7haLO'
access_token <- '1309109760248160260-co5uYuMYrJDBjOkAxxCLtHRXo9ETZH'
access_secret <- 'NRN9eR14asB2dL5lyDVQgPBfM2iol2FnXVTiXHEsFmauG'
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
virus <- searchTwitter('#Covid19 + #Coronavirus', lang='en', n = 1000, since = '2020-01-01', retryOnRateLimit = 1e3)
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
consumer_key <- 'rzurc0DlWQ3TqiOS8Dq4TFIT2'
consumer_secret <- 'MrZzGALRyL8Vz0M5DUJl56vVqTrtmdzqggh0V8az7SdRM7haLO'
access_token <- '1309109760248160260-co5uYuMYrJDBjOkAxxCLtHRXo9ETZH'
access_secret <- 'NRN9eR14asB2dL5lyDVQgPBfM2iol2FnXVTiXHEsFmauG'
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
consumer_key <- '55vFYPnOh745ECln3dHcqlHXp'
consumer_secret <- 'oYcaD6KZYqdJycXCRhoR1Ekjk9if3bFc8FH6t1WYYEtHAfNfRd'
access_token <- '1309109760248160260-iNz7oKkPDqMezmnxLyeke11dmOKSN4'
access_secret <- 'ViyG5NtwCmfJ5zeUPUL3fURadVOzF7fh83bKBrSGwp3YK'
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
consumer_key <- 'TjR0ZTduSnFqY1hkZTg0LXhoai06MTpjaQ'
consumer_secret <- '0iCTtYfUSf8yHnfANyKvG5cnoSdRhMqw335CeRBf_CUtgoejvD'
access_token <- '1309109760248160260-iNz7oKkPDqMezmnxLyeke11dmOKSN4'
access_secret <- 'ViyG5NtwCmfJ5zeUPUL3fURadVOzF7fh83bKBrSGwp3YK'
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
consumer_key <- '55vFYPnOh745ECln3dHcqlHXp'
consumer_secret <- 'oYcaD6KZYqdJycXCRhoR1Ekjk9if3bFc8FH6t1WYYEtHAfNfRd'
access_token <- '1309109760248160260-iNz7oKkPDqMezmnxLyeke11dmOKSN4'
access_secret <- 'ViyG5NtwCmfJ5zeUPUL3fURadVOzF7fh83bKBrSGwp3YK'
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
#loading libraries
library(janeaustenr)
library(dplyr)
library(stringr)
library(tidytext)
library(ggplot2)
library(tidyr)
library(wordcloud)
#reading data
original_books <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup()
chapter
ungroup
original_books
original_books <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup()
tidy_books <- original_books %>%
unnest_tokens(word, text)
tidy_books
#removing stopwords
data(stop_words)
tidy_books <- tidy_books %>%
anti_join(stop_words)
#most frequent words
tidy_books %>%
count(word, sort = TRUE)
tidy_books
tidy_books %>%
count(word, sort = TRUE)
tidy_books %>%
count(word, sort = TRUE) %>%
filter(n > 600) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
#getting sentiments into the environment
nrcjoy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
#getting sentiments into the environment
nrcjoy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tidy_books %>%
filter(book == "Emma") %>%
inner_join(nrcjoy) %>%
count(word, sort = TRUE)
nrcjoy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
nrcjoy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
nrcjoy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
library(nrc)
nrcjoy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
nrcjoy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
pride_prejudice <- tidy_books %>%
filter(book == "Pride & Prejudice")
#sentiments using affin
afinn <- pride_prejudice %>%
inner_join(get_sentiments("afinn")) %>%
group_by(index = linenumber %/% 80) %>%
summarise(sentiment = sum(score)) %>%
mutate(method = "AFINN")
1
afinn <- pride_prejudice %>%
inner_join(get_sentiments("afinn")) %>%
group_by(index = linenumber %/% 80) %>%
summarise(sentiment = sum(score)) %>%
mutate(method = "AFINN")
?score
bing_and_nrc <- bind_rows(
pride_prejudice %>%
inner_join(get_sentiments("bing")) %>%
mutate(method = "Bing et al."),
pride_prejudice %>%
inner_join(get_sentiments("nrc") %>%
filter(sentiment %in% c("positive",
"negative"))) %>%
mutate(method = "NRC")) %>%
count(method, index = linenumber %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
tidy_books %>%
anti_join(stop_words) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
afinn <- pride_prejudice %>%
inner_join(get_sentiments("afinn")) %>%
group_by(index = linenumber %/% 80) %>%
summarise(sentiment = sum(score)) %>%
mutate(method = "AFINN")
janeaustensentiment <- tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(book, index = linenumber %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
ggplot(janeaustensentiment, aes(index, sentiment, fill = book)) +
geom_col(show.legend = FALSE) +
facet_wrap(~book, ncol = 2, scales = "free_x")
pride_prejudice <- tidy_books %>%
filter(book == "Pride & Prejudice")
afinn <- pride_prejudice %>%
inner_join(get_sentiments("afinn")) %>%
group_by(index = linenumber %/% 80) %>%
summarise(sentiment = sum(score)) %>%
mutate(method = "AFINN")
bing_and_nrc <- bind_rows(
pride_prejudice %>%
inner_join(get_sentiments("bing")) %>%
mutate(method = "Bing et al."),
pride_prejudice %>%
inner_join(get_sentiments("nrc") %>%
filter(sentiment %in% c("positive",
"negative"))) %>%
mutate(method = "NRC")) %>%
count(method, index = linenumber %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
remove.packages("tidyr")
remove.packages("stringr")
remove.packages("tidytext")
install.packages("tidyr")
install.packages("tidyr")
install.packages("tidytext")
install.packages("stringr")
#loading libraries
library(janeaustenr)
library(dplyr)
library(stringr)
library(tidytext)
library(ggplot2)
library(tidyr)
library(wordcloud)
#reading data
original_books <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup()
#unnesting tokens
tidy_books <- original_books %>%
unnest_tokens(word, text)
#removing stopwords
data(stop_words)
tidy_books <- tidy_books %>%
anti_join(stop_words)
#most frequent words
tidy_books %>%
count(word, sort = TRUE)
#visualizing the most common words
tidy_books %>%
count(word, sort = TRUE) %>%
filter(n > 600) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
#getting sentiments into the environment
nrcjoy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
#getting sentiments into the environment
nrcjoy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
#loading libraries
library(wordcloud)
library(devtools)
library(tidyverse)
library(stringr)
#loading libraries
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
#loading libraries
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
library(stringr)
library(tidytext)
library(dplyr)
library(reshape2)
library(igraph)
library(ggraph)
if (packageVersion("devtools") < 1.6) {
install.packages("devtools")
}
devtools::install_github("bradleyboehmke/harrypotter")
library(harrypotter)
#loading and formatting data
titles <- c("Philosopher's Stone", "Chamber of Secrets", "Prisoner of Azkaban",
"Goblet of Fire", "Order of the Phoenix", "Half-Blood Prince",
"Deathly Hallows")
books <- list(philosophers_stone, chamber_of_secrets, prisoner_of_azkaban,
goblet_of_fire, order_of_the_phoenix, half_blood_prince,
deathly_hallows)
##Each book is an array in which each value in the array is a chapter
series <- tibble()
series
titles
books
temp <- tibble(chapter = seq_along(books[[i]]),
text = books[[i]]) %>%
unnest_tokens(word, text) %>%
##Here we tokenize each chapter into words
mutate(book = titles[i]) %>%
select(book, everything())
##Each book is an array in which each value in the array is a chapter
series <- tibble()
for(i in seq_along(titles)) {
temp <- tibble(chapter = seq_along(books[[i]]),
text = books[[i]]) %>%
unnest_tokens(word, text) %>%
##Here we tokenize each chapter into words
mutate(book = titles[i]) %>%
select(book, everything())
series <- rbind(series, temp)
}
# set factor to keep books in order of publication
series$book <- factor(series$book, levels = rev(titles))
series
#word count
series %>% count(word, sort = TRUE)
#wordcloud
series$book <- factor(series$book, levels = rev(titles))
series %>%
anti_join(stop_words) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
#wordcloud
series$book <- factor(series$book, levels = rev(titles))
series %>%
anti_join(stop_words) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
library(wordcloud)
#sentiments using bing
series %>%
right_join(get_sentiments("nrc")) %>%
filter(!is.na(sentiment)) %>%
count(sentiment, sort = TRUE)
library(textdata)
install.packages("textdata")
install.packages("textdata")
#sentiments using bing
series %>%
right_join(get_sentiments("nrc")) %>%
filter(!is.na(sentiment)) %>%
count(sentiment, sort = TRUE)
library(wordcloud)
library(devtools)
library(tidyverse)
library(stringr)
library(tidytext)
library(dplyr)
library(reshape2)
library(igraph)
library(ggraph)
series %>%
right_join(get_sentiments("nrc")) %>%
filter(!is.na(sentiment)) %>%
count(sentiment, sort = TRUE)
get_sentiments("nrc")
series %>%
right_join(get_sentiments("nrc")) %>%
filter(!is.na(sentiment)) %>%
count(sentiment, sort = TRUE)
?nrc
??nrc
?nrc_emotions
??nrc_emotions
?lexicon
??lexicon
??nrc_emotions
library(wordcloud)
library(devtools)
library(tidyverse)
library(stringr)
library(tidytext)
library(dplyr)
library(reshape2)
library(igraph)
library(ggraph)
series %>%
right_join(get_sentiments("nrc")) %>%
filter(!is.na(sentiment)) %>%
count(sentiment, sort = TRUE)
